import requests
import customtkinter as ctk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from datetime import datetime
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è (—Ç—ë–º–Ω—ã–π —Ä–µ–∂–∏–º + –Ω–µ–æ–Ω–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã)
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("green")  # –ù–µ–æ–Ω–æ–≤–æ-–∑–µ–ª—ë–Ω—ã–π

class CryptoApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("üíé CRYPTO DASHBOARD")
        self.geometry("1200x800")
        self.minsize(1000, 700)
        
        # –ö–µ—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (—á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ)
        self.data_cache = {}
        
        # –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö)
        self.cryptos = [
            "bitcoin", "ethereum", "solana", "cardano", 
            "ripple", "dogecoin", "avalanche", "polkadot", 
            "shiba-inu", "toncoin"
        ]
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å (—Å—Ç–∏–ª—å–Ω–∞—è)
        self.header = ctk.CTkFrame(self, fg_color="transparent")
        self.header.pack(pady=20, padx=20, fill="x")
        
        # –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        self.crypto_dropdown = ctk.CTkComboBox(
            self.header,
            values=self.cryptos,
            font=("Roboto", 16),
            dropdown_font=("Roboto", 14),
            button_color="#4e9a06",
            border_color="#4e9a06",
            width=200,
            command=self.start_loading  # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
        )
        self.crypto_dropdown.pack(side="left", padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_btn = ctk.CTkButton(
            self.header,
            text="üîÑ –û–ë–ù–û–í–ò–¢–¨",
            font=("Roboto", 14, "bold"),
            fg_color="transparent",
            border_color="#4e9a06",
            border_width=2,
            hover_color="#4e9a06",
            command=self.start_loading
        )
        self.refresh_btn.pack(side="left")
        
        # –°–ø–∏–Ω–Ω–µ—Ä (–ø—Ä–µ–ª–æ–∞–¥–µ—Ä)
        self.spinner = ctk.CTkLabel(self.header, text="", width=20)
        self.spinner.pack(side="left", padx=10)
        
        # –ì—Ä–∞—Ñ–∏–∫ (—Å—Ç–∏–ª—å Cyberpunk)
        plt.style.use("dark_background")
        self.fig, self.ax = plt.subplots(figsize=(12, 7), facecolor="#0a0a0a")
        self.canvas = FigureCanvasTkAgg(self.fig, master=self)
        self.canvas.get_tk_widget().pack(fill="both", expand=True, padx=20, pady=10)
        
        # –°—Ç–∞—Ç—É—Å-–±–∞—Ä
        self.status = ctk.CTkLabel(
            self,
            text="‚ñ∂ –í–´–ë–ï–†–ò–¢–ï –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–£",
            font=("Roboto", 12),
            text_color="#4e9a06",
            corner_radius=10,
            fg_color="#1a1a1a",
            padx=10,
            pady=5
        )
        self.status.pack(pady=10)
    
    def start_loading(self, _=None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—á—Ç–æ–±—ã GUI –Ω–µ –∑–∞–≤–∏—Å–∞–ª)."""
        crypto = self.crypto_dropdown.get()
        self.status.configure(text=f"‚åõ –ó–ê–ì–†–£–ó–ö–ê {crypto.upper()}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
        self.spinner.configure(text="‚è≥")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        thread = threading.Thread(target=self.update_graph, daemon=True)
        thread.start()
    
    def update_graph(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏)."""
        crypto = self.crypto_dropdown.get()
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –∫–µ—à–µ ‚Äî –±–µ—Ä—ë–º –æ—Ç—Ç—É–¥–∞
        if crypto in self.data_cache:
            self.draw_graph(self.data_cache[crypto], crypto)
            return
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ API (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º)
            data = requests.get(f"http://127.0.0.1:8000/predict/{crypto}").json()
            
            if "error" in data:
                self.show_error(data["error"])
                return
            
            # –ö–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            self.data_cache[crypto] = data
            self.draw_graph(data, crypto)
        
        except Exception as e:
            self.show_error(str(e))
    
    def draw_graph(self, data, crypto):
        """–†–∏—Å—É–µ—Ç —á—ë—Ç–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
        dates = [datetime.strptime(d, "%Y-%m-%d") for d in data["dates"]]
        prices = data["prices"]
        preds = data["predictions"]
    
        # –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        self.ax.clear()
    
        # --- –û—Å–Ω–æ–≤–Ω—ã–µ –ª–∏–Ω–∏–∏ ---
        # –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ (—Å–ø–ª–æ—à–Ω–∞—è –ª–∏–Ω–∏—è)
        self.ax.plot(
            dates, 
            prices, 
            label="–¶–µ–Ω–∞", 
            color="#2ecc71",  # –ó–µ–ª—ë–Ω—ã–π
            linewidth=2,      # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞
            marker="",        # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã
            solid_capstyle="round",  # –ó–∞–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–µ –∫–æ–Ω—Ü—ã
        )
    
        # –ü—Ä–æ–≥–Ω–æ–∑ (–ø—É–Ω–∫—Ç–∏—Ä)
        self.ax.plot(
            dates, 
            preds, 
            label="–ü—Ä–æ–≥–Ω–æ–∑", 
            color="#e74c3c",  # –ö—Ä–∞—Å–Ω—ã–π
            linestyle="--", 
            linewidth=1.5,
            marker="",        # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã
        )
    
        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π ---
        self.ax.set_title(
            f"{crypto.upper()}: –¶–µ–Ω–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑", 
            fontsize=14, 
            pad=10,
            color="white"
        )
    
        self.ax.set_xlabel("–î–∞—Ç–∞", color="#aaaaaa")
        self.ax.set_ylabel("–¶–µ–Ω–∞ (USD)", color="#aaaaaa")
    
        # –°–µ—Ç–∫–∞ (–ª—ë–≥–∫–∞—è)
        self.ax.grid(
            color="#333333", 
            linestyle="--", 
            linewidth=0.5,
            alpha=0.5
        )
    
        # –õ–µ–≥–µ–Ω–¥–∞ (–ø—Ä–æ—Å—Ç–∞—è)
        self.ax.legend(
            facecolor="#1a1a1a",
            fontsize=10,
            framealpha=0.7
        )
    
        # –§–æ–Ω
        self.ax.set_facecolor("#0a0a0a")
        self.fig.set_facecolor("#0a0a0a")
    
        # –ê–≤—Ç–æ–ø–æ–≤–æ—Ä–æ—Ç –¥–∞—Ç
        plt.xticks(rotation=45, ha="right")
    
        # –§–∏–∫—Å–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.fig.tight_layout()
        self.canvas.draw()

    
    def show_error(self, error):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ."""
        self.status.configure(text=f"‚ùå –û–®–ò–ë–ö–ê: {error}", text_color="#ff5555")
        self.spinner.configure(text="")

if __name__ == "__main__":
    app = CryptoApp()
    app.mainloop()